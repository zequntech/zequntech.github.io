<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zequn的博客</title>
  
  <subtitle>用文字记录成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zequntech.github.io/"/>
  <updated>2020-05-09T09:35:24.964Z</updated>
  <id>https://zequntech.github.io/</id>
  
  <author>
    <name>zequn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dagger2总结</title>
    <link href="https://zequntech.github.io/2016/07/28/dagger2-tutorial/"/>
    <id>https://zequntech.github.io/2016/07/28/dagger2-tutorial/</id>
    <published>2016-07-28T09:16:37.000Z</published>
    <updated>2020-05-09T09:35:24.964Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.unsplash.com/photo-1461749280684-dccba630e2f6?ixlib=rb-1.2.1&auto=format&fit=crop&w=2100&q=80" alt="coffee"></p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是一个DI(依赖注入)框架，JSR330是依赖注入的规范，在服务器端有spring实现,dagger2使用注解实现  </p><h3 id="Dagger2解决了什么问题"><a href="#Dagger2解决了什么问题" class="headerlink" title="Dagger2解决了什么问题"></a>Dagger2解决了什么问题</h3><ol><li>没有用到反射，编译期生成静态代码，生成一些Factory模板代码，性能上对比Guice,Dagger1提高</li><li>解决了依赖的顺序问题。当有多个类需要初始化(比如A先初始化，B后初始化，A作为B的入参),有依赖的时候要小心顺序问题</li><li>不用自己写单例(单例写法没办法抽象)，少写很多Factory模板代码</li><li>需要用到的时候@Inject，解耦、方便</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>所有代码托管在git@osc上<a href="https://git.oschina.net/checkyo/Dagger2Learn.git" target="_blank" rel="noopener">Dagger2Learn</a></p><h4 id="简单注入"><a href="#简单注入" class="headerlink" title="简单注入"></a>简单注入</h4><blockquote><p>假设MainActivity里有一个<code>NuclearController</code>。现在想用依赖注入，注入到MainActvity里</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NuclearController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NuclearController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里NuclearController是无参数构造，所以不需要Module提供资源。<code>MainActivityComponent</code>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity里使用--------------------</span></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">NuclearController nuclearController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    DaggerMainActivityComponent.builder().build().inject(<span class="keyword">this</span>);</span><br><span class="line">    Preconditions.checkNotNull(nuclearController);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>记得在<code>DaggerMainActivityComponent</code>调用之前Build一下</em></strong>, 按照写代码的顺序，先写自己的模块/layer，然后写<code>Component</code>,Component的作用是桥梁<br>用来连接你在Activity里@Inject的地方和在NuclearController构造函数上的@Inject。这是最简单的例子，通常我们的模型不可能空参，而且会依赖各种其他模型</p><h4 id="Module提供依赖资源"><a href="#Module提供依赖资源" class="headerlink" title="Module提供依赖资源"></a>Module提供依赖资源</h4><p>用@Module标注的类，可以为依赖提供参数，比如说此时NuclearController的构造函数变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NuclearController</span><span class="params">(<span class="keyword">long</span> electricity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.electricity = electricity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要给一个module用来提供构造需要的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> electricity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainModule</span><span class="params">(<span class="keyword">long</span> electricity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electricity = electricity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">provideElectry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> electricity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MainActivity调用--------------------</span></span><br><span class="line">DaggerMainActivityComponent.builder().mainModule(<span class="keyword">new</span> MainModule(<span class="number">10000</span>)).build().inject(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>用@Module修饰类，用@Provides修饰方法，提供需要的资源。对比更改前的代码，只是改了module和注入的地方，改动相当少<br>所以Component就是桥梁，将Controller和Activity连接起来，Module就是Provider,提供这个连接过程中需要的依赖参数</p><h4 id="Scope-Ⅰ"><a href="#Scope-Ⅰ" class="headerlink" title="Scope Ⅰ"></a>Scope Ⅰ</h4><blockquote><p>换一个实际的例子来说明Scope,Component的概念</p></blockquote><pre>.|-- HeroApplication.java|-- common|   |-- AppComponent.java|   `-- AppModule.java</pre><p>dagger2自带一个@Singleton，看看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></figure><p>并没有什么特殊的东西，所以我们自定义Scope只需要换一个名字就行了。Scope代表一种约束，这么说，所有Scope都可以看做是单例，但是不同于我们常规的单例，Scope在哪里用就在哪里是单例，生命周期需要我们自己处理。<br>比如AppComponent和AppModule都是全局性的，跟随应用生命周期的，我们用Singleton修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = AppModule<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Context <span class="title">getApplicationContext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------</span></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Application application;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(Application application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Application <span class="title">provideApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">provideApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------在Application里初始化依赖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppComponent appComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        appComponent = DaggerAppComponent.builder().appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>)).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppComponent虽然我们用Singleton修饰了，但是如果不在Application里提供一个get方法，这个Singleton的实例就没有用，接下来可以通过Application.getAppComponent使用了(只做理解，这个例子并没有什么卵用)<br><strong>Scope需要注意一点，一旦Component修饰了Scope，Module提供的方法上就必须声明同样的Scope</strong></p><h4 id="Scope-Ⅱ-amp-dependencies"><a href="#Scope-Ⅱ-amp-dependencies" class="headerlink" title="Scope Ⅱ &amp; dependencies"></a>Scope Ⅱ &amp; dependencies</h4><blockquote><p>为了说明Scope生命周期需要自己定义，我们添加BasicComponent，提供App开发过程中一些基础模型</p></blockquote><pre>.|-- HeroApplication.java|-- common|   |-- ActivityScope.java|   |-- ApiService.java|   |-- AppComponent.java|   |-- AppModule.java|   |-- BasicComponent.java|   |-- DBModule.java|   |-- LocalModule.java|   |-- NetworkModule.java|   `-- ThirdpartyService.java|-- main|   |-- MainActivity.java|   `-- MainActivityComponent.java|-- models|   `-- WeatherData.java</pre><p>网络模块，常用的httpclient,gson都在这里提供</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">provideGson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Retrofit <span class="title">provideRetrofit</span><span class="params">(OkHttpClient okHttpClient, Gson gson)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"http://api.openweathermap.org/data/2.5/"</span>)</span><br><span class="line">                .client(okHttpClient)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create(gson))</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApiService <span class="title">provideApiService</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(ApiService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThirdpartyService <span class="title">provideThirdpartyService</span><span class="params">(Retrofit retrofit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(ThirdpartyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Local模块，包括Cache和Shareperference,需要依赖Application</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache <span class="title">provideCache</span><span class="params">(Application application)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cache(application.getCacheDir(),<span class="number">30</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BasicComponent基本管理类统一注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;AppModule<span class="class">.<span class="keyword">class</span>, <span class="title">NetworkModule</span>.<span class="title">class</span>, <span class="title">LocalModule</span>.<span class="title">class</span>, <span class="title">DBModule</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">BasicComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">ApiService <span class="title">getApiService</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ThirdpartyService <span class="title">getThirdpartyService</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Gson <span class="title">getGson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">OkHttpClient <span class="title">getOkHttpClient</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Cache <span class="title">getCache</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Application里调用</span></span><br><span class="line">basicComponent = DaggerBasicComponent.builder()</span><br><span class="line">                .appModule(<span class="keyword">new</span> AppModule(<span class="keyword">this</span>))</span><br><span class="line">                .localModule(<span class="keyword">new</span> LocalModule())</span><br><span class="line">                .networkModule(<span class="keyword">new</span> NetworkModule())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><p>同样的，此时需要给<code>BasicComponent</code>提供get方法，方便我们后面调用<br>好了，现在在Activity里就可以直接使用<strong><em>Application.getBasicComponent().getOkHttpClient()</em></strong>获取实例了，但是饶了这么大圈子，只是这样，跟直接写单例没什么区别。<br>我想直接在MainActivity里使用@Inject注入这些常用工具  </p><ol><li>新建ActivityScope  </li><li>MainActivityComponent里使用依赖BasicComponent模块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = BasicComponent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">MainActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity里只要@Inject指定需要的注入的工具就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ApiService apiService;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    OkHttpClient okHttpClient;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Gson gson;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        DaggerMainActivityComponent.builder().basicComponent(((HeroApplication) getApplication()).getBasicComponent()).build().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="comment">//ApiService.getWeather()...</span></span><br><span class="line">        <span class="comment">//OkHttpClient...</span></span><br><span class="line">        <span class="comment">//gson...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的依赖，生成的代码里需要传入BasicComponent，实际上就是从basicComponent里取出来对MainActivity的@Inject成员变量赋值。因为我们在Application里已经初始化了BasicComponent，所以这里直接取，这里就可以说明@Singleton并没有<br>为我们做什么，生命周期是由我们自己控制的。为什么这里<code>dependencies</code>可以用，因为ActivityScope和Singleton名字不一样，仅此而已。所以说，层级关系，是逻辑上的，实际上的控制需要我们自己实现。<br><strong>为什么在BasicComponent里我们需要暴露一些方法返回OkHttpClient等等？</strong> </p><blockquote><p>This is actually an important property of how components work in Dagger: they do not expose types from their modules unless you explicitly make them available</p></blockquote><h4 id="Subcomponent"><a href="#Subcomponent" class="headerlink" title="Subcomponent"></a>Subcomponent</h4><blockquote><p><code>@Subcomponent</code>同样可以实现上面的效果，<code>@Subcomponent</code>和<code>dependencies</code>的区别有点像继承和组合，Subcomponent可以使用父Component的全部module资源，不需要在父Component里声明一些方法（像getOkHttpClient()这种）<br>插入一段文章：<br>The main difference between them is an objects graph sharing.<br>Subcomponents have access to entire objects graph from their parents while Component dependency gives access only to those which are exposed in Component interface. </p></blockquote><p>以Activity和Fragment的关系为例</p><pre>.|-- HeroApplication.java|-- common|   `-- ActivityScope.java`-- subcomponentdemo    |-- ChildFragment.java    |-- ChildFragmentComponent.java    |-- SecondActivity.java    |-- SecondActivityComponent.java    `-- SecondActivityModule.java</pre><p>用法比较奇怪，@Subcomponent修饰的类，需要在他的父Component上添加方法返回Subcomponent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Random <span class="title">provideRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;SecondActivityModule<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">SecondActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果是用@Subcomponent需要如下声明</span></span><br><span class="line">    <span class="function">ChildFragmentComponent <span class="title">simpleComponent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生命周期自己把控</span></span><br><span class="line">    <span class="keyword">private</span> SecondActivityComponent secondActivityComponent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.second_activity);</span><br><span class="line">        secondActivityComponent = DaggerSecondActivityComponent.builder().build();</span><br><span class="line">        getSupportFragmentManager().beginTransaction().replace(R.id.main, <span class="keyword">new</span> ChildFragment()).commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecondActivityComponent <span class="title">getSecondActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secondActivityComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的还是得在Activity里添加Component的get方法,在ChildFragment里@Inject注入就可以了，但是Dagger2不会生成DaggerChildFragmentComponent这样的类，<code>ChildFragmentComponent</code>需要从附着的Activity上的SecondActivityComponent身上获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="comment">//享用父级别的全部module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChildFragmentComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(ChildFragment fragment)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Random random;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(activity);</span><br><span class="line">        ((SecondActivity) activity).getSecondActivityComponent().simpleComponent().inject(<span class="keyword">this</span>);</span><br><span class="line">        Preconditions.checkNotNull(random);</span><br><span class="line">        Log.i(<span class="string">"TAG"</span>, <span class="string">"random:"</span> + random);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.child_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lazy和Provider"><a href="#Lazy和Provider" class="headerlink" title="Lazy和Provider"></a>Lazy<T>和Provider<T></h4><blockquote><p>Lazy<T>有点类似懒汉模式的加载，他将创建对象延迟到第一次调用 ，Provider<T>每次get得到的值都是不一样的。<br>TODO: 后面有更高级的用法再补</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Lazy&lt;PersonController&gt; mPersonProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Provider&lt;NuclearController&gt; mNuclearProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        DaggerMainActivityComponent.builder().mainModule(<span class="keyword">new</span> MainModule(<span class="number">10000</span>)).build().inject(<span class="keyword">this</span>);</span><br><span class="line">        mPersonProvider.get().output();<span class="comment">// I am a controller</span></span><br><span class="line">        NuclearController nuclearController1 = mNuclearProvider.get();</span><br><span class="line">        NuclearController nuclearController2 = mNuclearProvider.get();</span><br><span class="line">        Log.i(<span class="string">"TAG"</span>,(nuclearController1==nuclearController2)+<span class="string">""</span>);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p>我把自己学习的结论写在这里，理解这个过程花了不少时间，建议学习的过程还是看看源码。  </p></blockquote><p><a href="https://medium.com/@patrykpoborca/making-a-best-practice-app-4-dagger-2-267ec5f6c89a#.tk3xmbltz" target="_blank" rel="noopener">Making a Best Practice App #4 — Dagger 2</a><br><a href="http://www.jianshu.com/p/39d1df6c877d" target="_blank" rel="noopener">Dagger2从入门到放弃再到恍然大悟</a><br><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/" target="_blank" rel="noopener">Dependency injection with Dagger 2 - Custom scopes</a><br><a href="https://github.com/codepath/android_guides/wiki/Dependency-Injection-with-Dagger-2" target="_blank" rel="noopener">Dependency Injection with Dagger 2</a>  </p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>dagger2要注意声明的component生命周期问题，需要自己控制</li><li>Component里定义的方法名，不要纠结inject名字，可以随意起。是否要注入(void inject(Activity activity);)取决于你是否在用的地方(Activity)使用@Inject标注了变量</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1461749280684-dccba630e2f6?ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=2100&amp;q=80&quot; alt=&quot;coffee&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://zequntech.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://zequntech.github.io/tags/android/"/>
    
      <category term="dagger2" scheme="https://zequntech.github.io/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>Task and the BackStack</title>
    <link href="https://zequntech.github.io/2016/05/17/Task-and-BackStack/"/>
    <id>https://zequntech.github.io/2016/05/17/Task-and-BackStack/</id>
    <published>2016-05-17T08:55:38.000Z</published>
    <updated>2020-05-09T09:32:26.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><blockquote></blockquote><ul><li>新闻类App有新内容推送过来时，从Notification打开详情页面，此时按返回键，返回的是新闻列表页（主页面）。  </li><li>邮件类型的App，从邮件列表进入到详情，并从详情页面进入到更深的子页面，此时返回键是根据用户浏览习惯返回，顶部导航（ActionBar)返回的是邮件列表页。</li></ul><a id="more"></a><h4 id="实现新闻的效果"><a href="#实现新闻的效果" class="headerlink" title="实现新闻的效果"></a>实现新闻的效果</h4><p>PendingIntent携带任务栈信息，配置xml,DetailsActivity配置parentActivity;</p><ul><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>     </span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".MyApplication"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- DetailsActivity的parentActivity是MainActivity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".DetailsActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:parentActivityName</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.support.PARENT_ACTIVITY"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">".MainActivity"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MyService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- more --><ul><li>Service里开启一个Notification(just demo)  </li></ul><blockquote><p>原理是利用TaskStackBuilder来返回PendingIntent,这样在startActivity的时候会构建Activity栈</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">//如果直接使用PendingIntent.getActivity，按下返回键只能返回到launcher界面</span></span><br><span class="line">        <span class="comment">//PendingIntent pendingIntent = PendingIntent.getActivity(this, 1, new Intent(this, DetailsActivity.class), PendingIntent.FLAG_ONE_SHOT);</span></span><br><span class="line">        <span class="comment">// Construct the Intent you want to end up at</span></span><br><span class="line">        Intent detailActivity = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DetailsActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        TaskStackBuilder stackBuilder = TaskStackBuilder.create(<span class="keyword">this</span>);</span><br><span class="line">        stackBuilder.addNextIntentWithParentStack(detailActivity);</span><br><span class="line">        PendingIntent pendingIntent = stackBuilder</span><br><span class="line">                .getPendingIntent(<span class="number">0</span>, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">        NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line">        builder.setContentText(<span class="string">"测试内容"</span>).</span><br><span class="line">                setContentIntent(pendingIntent).</span><br><span class="line">                setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line">        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        manager.notify(<span class="number">1</span>, builder.build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><ol><li>Notification打开DetailsActivity的时候,此时MainActivity已经销毁，只剩下Service<br> <code>05-17 16:07:42.314 4946-4946/com.asura.justfortest I/TAG: onCreate: DetailsActivity</code><br> 按下返回键的时候<br> <code>05-17 16:07:46.916 4946-4946/com.asura.justfortest I/TAG: onCreate: MainActivity</code><br> 好处是本应用没有开启，这种方式返回时可以带到主页去</li><li>当MainActivity和DetailsActivity都存在的情况下，使用这种方式会将app现有的Task栈<code>取代</code>,即现有的所有Activity会销毁，即使设置launchMode为singleTask也没用</li><li>对于不想销毁现有的任务栈的情况，notification配intent时就不要配置TaskStack,针对DetailsActivity可以覆盖返回键，当Task栈为空的时候，启动带Stack的Intent，如果栈不为空，直接finish掉.</li></ol><h4 id="顶部导航或者返回键回到父页面-中间的会被销毁"><a href="#顶部导航或者返回键回到父页面-中间的会被销毁" class="headerlink" title="顶部导航或者返回键回到父页面(中间的会被销毁)"></a>顶部导航或者返回键回到父页面(中间的会被销毁)</h4><p>覆盖onOptionsItemSelected，onBackPress();其中，调用NavUtils.getParentActivityIntent()方法可以获取到跳转至父Activity的Intent，然后如果父Activity和当前Activity是在同一个Task中的，则直接调用navigateUpTo()方法进行跳转，如果不是在同一个Task中的，则需要借助TaskStackBuilder来创建一个新的Task</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;  </span><br><span class="line">    <span class="keyword">case</span> android.R.id.home:  </span><br><span class="line">        goToMain();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    goToMain();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goToMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent upIntent = NavUtils.getParentActivityIntent(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (NavUtils.shouldUpRecreateTask(<span class="keyword">this</span>, upIntent)) &#123;</span><br><span class="line">        TaskStackBuilder.create(<span class="keyword">this</span>)</span><br><span class="line">                .addNextIntentWithParentStack(upIntent)</span><br><span class="line">                .startActivities();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//设置CLEAR_TOP如果MainActivity存在，会调用onNewIntent()方法</span></span><br><span class="line">        upIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        NavUtils.navigateUpTo(<span class="keyword">this</span>, upIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://medium.com/google-developers/tasks-and-the-back-stack-dbb7c3b0f6d4#.ucprfwxig" target="_blank" rel="noopener">Tasks and the Back Stack</a>  </li><li><a href="http://blog.csdn.net/guolin_blog/article/details/18234477" target="_blank" rel="noopener">Android ActionBar完全解析，使用官方推荐的最佳导航栏(上)</a>    </li><li><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html" target="_blank" rel="noopener">notification官方文档</a>  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新闻类App有新内容推送过来时，从Notification打开详情页面，此时按返回键，返回的是新闻列表页（主页面）。  &lt;/li&gt;
&lt;li&gt;邮件类型的App，从邮件列表进入到详情，并从详情页面进入到更深的子页面，此时返回键是根据用户浏览习惯返回，顶部导航（ActionBar)返回的是邮件列表页。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://zequntech.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://zequntech.github.io/tags/android/"/>
    
      <category term="TaskStackBuilder" scheme="https://zequntech.github.io/tags/TaskStackBuilder/"/>
    
      <category term="PendingIntent" scheme="https://zequntech.github.io/tags/PendingIntent/"/>
    
  </entry>
  
  <entry>
    <title>android studio常用插件和快捷键</title>
    <link href="https://zequntech.github.io/2016/05/12/android-studio%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://zequntech.github.io/2016/05/12/android-studio%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2016-05-12T02:57:30.000Z</published>
    <updated>2020-05-09T08:38:48.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h3><p>findViewById<br>Code Generater<br>GsonFormater<br>parcelable<br>svg2android<br>FindBugs<br>MaterialDesignIconGenerator  </p><a id="more"></a><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><table><thead><tr><th align="left">功能</th><th align="right">快捷键</th></tr></thead><tbody><tr><td align="left">复制一行</td><td align="right">ctrl+d</td></tr><tr><td align="left">删除一行</td><td align="right">ctrl+y</td></tr><tr><td align="left">改名</td><td align="right">shift+F6</td></tr><tr><td align="left">代码格式化</td><td align="right">ctrl+alt+L</td></tr><tr><td align="left">移动代码</td><td align="right">ctrl+shift+上下箭头</td></tr><tr><td align="left">类方法之间移动</td><td align="right">alt+上下箭头</td></tr><tr><td align="left">查看方法的时候可以回退到之前调用的位置</td><td align="right">ctrl+shift+左右箭头</td></tr><tr><td align="left">代码提示</td><td align="right">ctrl+空格/ctrl+shift+空格</td></tr><tr><td align="left">纠错</td><td align="right">alt+回车</td></tr><tr><td align="left">快速插入代码</td><td align="right">alt+insert</td></tr><tr><td align="left">提示函数参数</td><td align="right">ctrl+p</td></tr><tr><td align="left">查看类继承体系</td><td align="right">ctrl+H</td></tr><tr><td align="left">提成局部变量</td><td align="right">ctrl+alt+v/.var</td></tr><tr><td align="left">提成成员变量</td><td align="right">ctrl+alt+f</td></tr><tr><td align="left">快速打出static的TAG</td><td align="right">logt(在代码空白处)</td></tr><tr><td align="left">输出log.d()包含当前函数的入参信息</td><td align="right">logm</td></tr><tr><td align="left">快速打印日志信息</td><td align="right">logi,loge,logd</td></tr><tr><td align="left">选中单个词，单行，多行(多按几次)</td><td align="right">ctrl+W</td></tr><tr><td align="left">快速复写父类方法(Override)</td><td align="right">ctrl+O</td></tr><tr><td align="left">surround with(插入try catch..)</td><td align="right">ctrl+alt+T</td></tr><tr><td align="left">打开、查找一个类</td><td align="right">ctrl+N</td></tr><tr><td align="left">打开、查找一个文件</td><td align="right">ctrl+shift+N</td></tr><tr><td align="left">展开、折叠一个方法</td><td align="right">ctrl+加减</td></tr><tr><td align="left">展开、折叠所有方法</td><td align="right">ctrl+shift+加减</td></tr><tr><td align="left">选项卡之间快速切换</td><td align="right">alt+左右箭头</td></tr><tr><td align="left">快速定位错误代码</td><td align="right">F2</td></tr><tr><td align="left">在类中查看一个方法的实现,不跳转(弹出小框)</td><td align="right">ctrl+shift+I</td></tr><tr><td align="left">查看一个类的结构</td><td align="right">ctrl+F12</td></tr><tr><td align="left">查看一个类的继承关系</td><td align="right">ctrl+H</td></tr><tr><td align="left">快速选择模板代码(fbc,fori,ifn,Toast)</td><td align="right">ctrl+J</td></tr><tr><td align="left">大小写切换</td><td align="right">ctrl+shift+u</td></tr></tbody></table><ul><li>F11可以将一行代码加入到收藏（版本控制不会保存收藏信息）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用的插件&quot;&gt;&lt;a href=&quot;#常用的插件&quot; class=&quot;headerlink&quot; title=&quot;常用的插件&quot;&gt;&lt;/a&gt;常用的插件&lt;/h3&gt;&lt;p&gt;findViewById&lt;br&gt;Code Generater&lt;br&gt;GsonFormater&lt;br&gt;parcelable&lt;br&gt;svg2android&lt;br&gt;FindBugs&lt;br&gt;MaterialDesignIconGenerator  &lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://zequntech.github.io/categories/android/"/>
    
    
      <category term="android studio" scheme="https://zequntech.github.io/tags/android-studio/"/>
    
  </entry>
  
  <entry>
    <title>crosswalk学习整理</title>
    <link href="https://zequntech.github.io/2016/05/12/crosswalk%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>https://zequntech.github.io/2016/05/12/crosswalk%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</id>
    <published>2016-05-12T02:32:23.000Z</published>
    <updated>2020-05-09T07:21:58.473Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h3><blockquote><p>Crosswalk使用了Chromium内核，这意味着只能在Android 4.0以上才能使用，安卓4.4已经采用Chrominum内核，如果只是做简单的网页显示，原生的足够了，4.4以下的webkit内核有许多bug，各个版本不一致，api使用都有些不同（文件上传在4.4~4.4.2这之间的根本无解）。对于要做hybrid应用以及想解决平台一致性问题可以使用Crosswalk，但是牺牲的是apk的体积，集成Crosswalk体积至少要增大20M+(官方提供了shared模式，apk里不带runtime环境，首次运行时下载安装,可以自由配置下载地址)</p></blockquote><a id="more"></a><h3 id="开发方式一"><a href="#开发方式一" class="headerlink" title="开发方式一"></a>开发方式一</h3><blockquote><p>如果要使用Crosswalk提供的开发方式，需要配置开发环境，并且后续的创建项目打包都是基于命令行形式的，适合不会Android的web开发人员使用，比如下面这些都需要安装</p></blockquote><ul><li>Java JDK</li><li>Apache Ant</li><li>Android SDK</li><li>NPM</li><li>Crosswalk App Tools</li></ul><p><a href="http://www.tuicool.com/articles/RfyEjae" target="_blank" rel="noopener">中文参考</a><br><a href="https://crosswalk-project.org/apis/embeddingapidocs/reference/org/xwalk/core/XWalkView.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="开发方式二-Embedding-the-Crosswalk-Project"><a href="#开发方式二-Embedding-the-Crosswalk-Project" class="headerlink" title="开发方式二  Embedding the Crosswalk Project"></a>开发方式二  Embedding the Crosswalk Project</h3><blockquote><p>相当于嵌入一个WebView<br>Using the embedding API is only recommended for cases where you have a substantial amount of Java code in your application, but want to write the UI (or parts of the UI) using web technologies.   </p></blockquote><ul><li>XWalkView默认不能设置Visible和动画<br>XWalkView represents an Android view for web apps/pages. Thus most of attributes for Android view are valid for this class. Since it internally uses android.view.SurfaceView for rendering web pages by default, it can’t be resized, rotated, transformed and animated due to the limitations of SurfaceView. Alternatively, if the preference key <code>ANIMATABLE_XWALK_VIEW</code> is set to True, XWalkView can be transformed and animated because TextureView is intentionally used to render web pages for animation support. Besides, XWalkView won’t be rendered if it’s invisible.</li><li>XWalkView需要开启硬件加速<br>XWalkView needs hardware acceleration to render web pages. As a result, the AndroidManifest.xml of the caller’s app must be appended with the attribute “android:hardwareAccelerated” and its value must be set as “true”.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">"android.app.Application"</span> <span class="attr">android:label</span>=<span class="string">"XWalkUsers"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>注意生命周期的接管<br>Unlike other Android views, this class has to listen to system events like application life cycle, intents, and activity result. The web engine inside this view need to get and handle them. And the onDestroy() method of XWalkView MUST be called explicitly when an XWalkView won’t be used anymore, otherwise it will cause the memory leak from the native side of the web engine. It’s similar to the destroy() method of Android WebView. For example: </li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xwalk.core.XWalkResourceClient;</span><br><span class="line"><span class="keyword">import</span> org.xwalk.core.XWalkUIClient;</span><br><span class="line"><span class="keyword">import</span> org.xwalk.core.XWalkView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">   XWalkView mXwalkView;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyResourceClient</span> <span class="keyword">extends</span> <span class="title">XWalkResourceClient</span> </span>&#123;</span><br><span class="line">       MyResourceClient(XWalkView view) &#123;</span><br><span class="line">           <span class="keyword">super</span>(view);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function">WebResourceResponse <span class="title">shouldInterceptLoadRequest</span><span class="params">(XWalkView view, String url)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// Handle it here.</span></span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyUIClient</span> <span class="keyword">extends</span> <span class="title">XWalkUIClient</span> </span>&#123;</span><br><span class="line">       MyUIClient(XWalkView view) &#123;</span><br><span class="line">           <span class="keyword">super</span>(view);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">onFullscreenToggled</span><span class="params">(XWalkView view, String url)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// Handle it here.</span></span><br><span class="line">           ...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       mXwalkView = <span class="keyword">new</span> XWalkView(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">       setContentView(mXwalkView);</span><br><span class="line">       mXwalkView.setResourceClient(<span class="keyword">new</span> MyResourceClient(mXwalkView));</span><br><span class="line">       mXwalkView.setUIClient(<span class="keyword">new</span> MyUIClient(mXwalkView));</span><br><span class="line">       mXwalkView.load(<span class="string">"http://www.crosswalk-project.org"</span>, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onPause();</span><br><span class="line">       <span class="keyword">if</span> (mXwalkView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mXwalkView.pauseTimers();</span><br><span class="line">           mXwalkView.onHide();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onResume();</span><br><span class="line">       <span class="keyword">if</span> (mXwalkView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mXwalkView.resumeTimers();</span><br><span class="line">           mXwalkView.onShow();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDestroy();</span><br><span class="line">       <span class="keyword">if</span> (mXwalkView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mXwalkView.onDestroy();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mXwalkView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mXwalkView.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mXwalkView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           mXwalkView.onNewIntent(intent);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置gradle"><a href="#配置gradle" class="headerlink" title="配置gradle"></a>配置gradle</h4><ul><li>添加仓库<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加cpu配置<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    splits &#123;</span><br><span class="line">        abi &#123;</span><br><span class="line">            enable <span class="literal">true</span></span><br><span class="line">            reset()</span><br><span class="line">            include <span class="string">'x86'</span>, <span class="string">'armeabi-v7a'</span> <span class="comment">//select ABIs to build APKs for</span></span><br><span class="line">            universalApk <span class="literal">true</span> <span class="comment">//generate an additional APK that contains all the ABIs</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        armv7 &#123;</span><br><span class="line">            versionCode defaultConfig.versionCode + <span class="number">2</span></span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        x86 &#123;</span><br><span class="line">            versionCode defaultConfig.versionCode + <span class="number">4</span></span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"x86"</span>, <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>添加XWalkview依赖<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'org.xwalk:xwalk_core_library:18.48.477.13'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="混淆配置"><a href="#混淆配置" class="headerlink" title="混淆配置"></a>混淆配置</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-keepclasseswithmembernames <span class="class"><span class="keyword">class</span> * &#123;</span>native &lt;methods&gt;;&#125;</span><br><span class="line"></span><br><span class="line">-keepattributes JNINamespace</span><br><span class="line">-keepattributes CalledByNative</span><br><span class="line">-keepattributes Annotation</span><br><span class="line">-keepattributes EnclosingMethod</span><br><span class="line"></span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">xwalk</span>.&#123;</span> *; &#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">interface</span> <span class="title">org</span>.<span class="title">xwalk</span>.&#123;</span> *; &#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">extension</span>.**&#123;</span> *; &#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">crosswalkproject</span>.*&#123;</span> *; &#125;</span><br><span class="line"></span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">base</span>.<span class="title">Native</span></span></span><br><span class="line"><span class="class">-<span class="title">keep</span> <span class="title">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">base</span>.<span class="title">annotations</span>.<span class="title">JNINamespace</span></span></span><br><span class="line"><span class="class">-<span class="title">keepclasseswithmembers</span> <span class="title">class</span> <span class="title">org</span>.<span class="title">chromium</span>. &#123;</span> <span class="meta">@org</span>.chromium.base.AccessedByNative &lt;methods&gt;; &#125;</span><br><span class="line">-keepclasseswithmembers <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>. &#123;</span> <span class="meta">@org</span>.chromium.base.Native &lt;methods&gt;; &#125;</span><br><span class="line"></span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.** &#123;</span> native &lt;methods&gt;; &#125;</span><br><span class="line"></span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">base</span>.<span class="title">UsedBy</span></span></span><br><span class="line"><span class="class">#-<span class="title">keep</span> @<span class="title">org</span>.<span class="title">chromium</span>.<span class="title">base</span>.<span class="title">UsedBy</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">-<span class="title">keepclassmembers</span> <span class="title">class</span> * &#123;</span> <span class="meta">@org</span>.chromium.base.UsedBy *; &#125;</span><br><span class="line"></span><br><span class="line">#-keep @org.chromium.base.annotations.JNINamespace class</span><br><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> * &#123;</span> <span class="meta">@org</span>.chromium.base.annotations.CalledByNative *; &#125;</span><br><span class="line">-dontnote org.chromium.net.AndroidKeyStore</span><br><span class="line">-dontnote org.chromium.net.UrlRequest$ResponseHeadersMap</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">ui</span>.<span class="title">ColorPickerAdvanced</span> &#123;</span> &lt;methods&gt;; &#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">ui</span>.<span class="title">ColorPickerMoreButton</span> &#123;</span> &lt;methods&gt;; &#125;</span><br><span class="line">-keep <span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">chromium</span>.<span class="title">ui</span>.<span class="title">ColorPickerSimple</span> &#123;</span> &lt;methods&gt;; &#125;</span><br></pre></td></tr></table></figure><h4 id="实现文件选择-Implementing-a-file-input-with-Camera-support-in-Android-with-CrossWalk"><a href="#实现文件选择-Implementing-a-file-input-with-Camera-support-in-Android-with-CrossWalk" class="headerlink" title="实现文件选择: Implementing a file input with Camera support in Android with CrossWalk"></a>实现文件选择: Implementing a file input with Camera support in Android with CrossWalk</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    xWalkView.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>should be overridden into the class XWalkUIClient:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(XWalkView view, <span class="keyword">final</span> ValueCallback uploadFile, String acceptType, String capture)</span> </span>&#123;</span><br><span class="line">    uploadFile.onReceiveValue(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链接Link"><a href="#链接Link" class="headerlink" title="链接Link"></a>链接Link</h4><p><a href="http://www.programcreek.com/java-api-examples/index.php?api=org.xwalk.core.XWalkView" target="_blank" rel="noopener">大量sample</a><br><a href="http://developers-club.com/posts/263655/" target="_blank" rel="noopener">Crosswalk Project — replacement of Android WebView. Integration problems</a></p><h4 id="XWalkPreferences-setValue只能在XWalkView未初始化之前调用，全局性配置"><a href="#XWalkPreferences-setValue只能在XWalkView未初始化之前调用，全局性配置" class="headerlink" title="XWalkPreferences.setValue只能在XWalkView未初始化之前调用，全局性配置"></a>XWalkPreferences.setValue只能在XWalkView未初始化之前调用，全局性配置</h4><h4 id="操蛋的回退键问题"><a href="#操蛋的回退键问题" class="headerlink" title="操蛋的回退键问题"></a>操蛋的回退键问题</h4><blockquote><p>XWalkView会接管Activity的onKeyUp，默认返回键就是回退历史，但是没有提供接口去控制。导致，一个页面有输入框，弹出输入法后不是关闭输入法，而是直接回退历史记录。不明白为什么要这么设计<br>解决方案：重写dispatchKeyEvent，当发现是回退键按下直接返回false，扔给外层处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XWalkViewEx</span> <span class="keyword">extends</span> <span class="title">XWalkView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XWalkViewEx</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XWalkViewEx</span><span class="params">(Context context, Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, activity);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XWalkViewEx</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_DOWN &amp;&amp; event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">            <span class="comment">//我要自己处理回退键</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iniConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        XWalkPreferences.setValue(XWalkPreferences.ANIMATABLE_XWALK_VIEW, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyBack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mXWalkView.getNavigationHistory().canGoBack()) &#123;</span><br><span class="line">        mXWalkView.getNavigationHistory().navigate(XWalkNavigationHistory.Direction.BACKWARD, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简单说明&quot;&gt;&lt;a href=&quot;#简单说明&quot; class=&quot;headerlink&quot; title=&quot;简单说明&quot;&gt;&lt;/a&gt;简单说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Crosswalk使用了Chromium内核，这意味着只能在Android 4.0以上才能使用，安卓4.4已经采用Chrominum内核，如果只是做简单的网页显示，原生的足够了，4.4以下的webkit内核有许多bug，各个版本不一致，api使用都有些不同（文件上传在4.4~4.4.2这之间的根本无解）。对于要做hybrid应用以及想解决平台一致性问题可以使用Crosswalk，但是牺牲的是apk的体积，集成Crosswalk体积至少要增大20M+(官方提供了shared模式，apk里不带runtime环境，首次运行时下载安装,可以自由配置下载地址)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://zequntech.github.io/categories/android/"/>
    
    
      <category term="webview" scheme="https://zequntech.github.io/tags/webview/"/>
    
      <category term="crosswalk" scheme="https://zequntech.github.io/tags/crosswalk/"/>
    
  </entry>
  
</feed>
